From a35c69d0e52116964e6e254411362b6edf40dc09 Mon Sep 17 00:00:00 2001
From: Emerson Pinter <dev@pinter.com.br>
Date: Wed, 18 Jul 2012 17:42:30 +0700
Subject: [PATCH] add support old libaudio

---
 audio/A2dpAudioInterface.h                       |    3 +-
 audio/Android.mk                                 |    4 +++
 audio/AudioHardwareInterface.cpp                 |    2 +
 audio/audio_hw_hal.cpp                           |   30 ++++++++++++++++++++++
 include/hardware_legacy/AudioHardwareBase.h      |    3 ++
 include/hardware_legacy/AudioHardwareInterface.h |    2 +
 6 files changed, 43 insertions(+), 1 deletions(-)

diff --git a/audio/A2dpAudioInterface.h b/audio/A2dpAudioInterface.h
index 8fe9745..19a5435 100644
--- a/audio/A2dpAudioInterface.h
+++ b/audio/A2dpAudioInterface.h
@@ -38,8 +38,9 @@ public:
     virtual status_t    initCheck();
 
     virtual status_t    setVoiceVolume(float volume);
+#ifndef USES_AUDIO_LEGACY
     virtual status_t    setMasterVolume(float volume);
-
+#endif
     virtual status_t    setMode(int mode);
 
     // mic mute
diff --git a/audio/Android.mk b/audio/Android.mk
index a69b9cd..a5b4abc 100644
--- a/audio/Android.mk
+++ b/audio/Android.mk
@@ -10,6 +10,10 @@ LOCAL_SRC_FILES := \
     AudioHardwareInterface.cpp \
     audio_hw_hal.cpp
 
+ifeq ($(BOARD_USES_AUDIO_LEGACY),true)
+    LOCAL_CFLAGS += -DUSES_AUDIO_LEGACY -DNO_SCREEN_STATE_KEY_SUPPORT
+endif
+
 LOCAL_MODULE := libaudiohw_legacy
 LOCAL_MODULE_TAGS := optional
 LOCAL_STATIC_LIBRARIES := libmedia_helper
diff --git a/audio/AudioHardwareInterface.cpp b/audio/AudioHardwareInterface.cpp
index 60cce27..8c2fffe 100644
--- a/audio/AudioHardwareInterface.cpp
+++ b/audio/AudioHardwareInterface.cpp
@@ -128,11 +128,13 @@ size_t AudioHardwareBase::getInputBufferSize(uint32_t sampleRate, int format, in
     return 320;
 }
 
+#ifndef USES_AUDIO_LEGACY
 // default implementation is unsupported
 status_t AudioHardwareBase::getMasterVolume(float *volume)
 {
     return INVALID_OPERATION;
 }
+#endif
 
 status_t AudioHardwareBase::dumpState(int fd, const Vector<String16>& args)
 {
diff --git a/audio/audio_hw_hal.cpp b/audio/audio_hw_hal.cpp
index ab4d63a..ec90fed 100644
--- a/audio/audio_hw_hal.cpp
+++ b/audio/audio_hw_hal.cpp
@@ -81,7 +81,13 @@ static uint32_t out_get_channels(const struct audio_stream *stream)
 {
     const struct legacy_stream_out *out =
         reinterpret_cast<const struct legacy_stream_out *>(stream);
+#ifndef USES_AUDIO_LEGACY
     return out->legacy_out->channels();
+#else
+    return out->legacy_out->channels() >> 2;
+#endif
+
+
 }
 
 static audio_format_t out_get_format(const struct audio_stream *stream)
@@ -358,8 +364,11 @@ static int adev_set_master_volume(struct audio_hw_device *dev, float volume)
 
 static int adev_get_master_volume(struct audio_hw_device *dev, float* volume)
 {
+#ifndef USES_AUDIO_LEGACY
     struct legacy_audio_device *ladev = to_ladev(dev);
     return ladev->hwif->getMasterVolume(volume);
+#endif
+    return INVALID_OPERATION;
 }
 
 static int adev_set_mode(struct audio_hw_device *dev, audio_mode_t mode)
@@ -384,6 +393,13 @@ static int adev_get_mic_mute(const struct audio_hw_device *dev, bool *state)
 static int adev_set_parameters(struct audio_hw_device *dev, const char *kvpairs)
 {
     struct legacy_audio_device *ladev = to_ladev(dev);
+#ifdef NO_SCREEN_STATE_KEY_SUPPORT
+    // ignore screen_state=off/on new ics key
+    if (strncmp(kvpairs, "screen_state=", 13) == 0 && strlen(kvpairs) <= 16) {
+        ALOGV("%s:%d %s (ignored)", __FUNCTION__, __LINE__, kvpairs);
+        return 0;
+    }
+#endif
     return ladev->hwif->setParameters(String8(kvpairs));
 }
 
@@ -416,18 +432,32 @@ static int adev_open_output_stream(struct audio_hw_device *dev,
     status_t status;
     struct legacy_stream_out *out;
     int ret;
+#ifdef USES_AUDIO_LEGACY
+    uint32_t channels;
+#endif
 
     out = (struct legacy_stream_out *)calloc(1, sizeof(*out));
     if (!out)
         return -ENOMEM;
 
+#ifndef USES_AUDIO_LEGACY
     out->legacy_out = ladev->hwif->openOutputStream(devices, (int *) &config->format,
                                                     &config->channel_mask,
                                                     &config->sample_rate, &status);
+#else
+    channels = config->channel_mask << 2;
+    out->legacy_out = ladev->hwif->openOutputStream(devices, (int *) &config->format,
+                                                    &channels,
+                                                    &config->sample_rate, &status);
+#endif
+
     if (!out->legacy_out) {
         ret = status;
         goto err_open;
     }
+#ifdef USES_AUDIO_LEGACY
+    config->channel_mask = channels >> 2;
+#endif
 
     out->stream.common.get_sample_rate = out_get_sample_rate;
     out->stream.common.set_sample_rate = out_set_sample_rate;
diff --git a/include/hardware_legacy/AudioHardwareBase.h b/include/hardware_legacy/AudioHardwareBase.h
index eac40dc..771f757 100644
--- a/include/hardware_legacy/AudioHardwareBase.h
+++ b/include/hardware_legacy/AudioHardwareBase.h
@@ -46,7 +46,10 @@ public:
     virtual String8     getParameters(const String8& keys);
 
     virtual  size_t     getInputBufferSize(uint32_t sampleRate, int format, int channelCount);
+
+#ifndef USES_AUDIO_LEGACY
     virtual status_t    getMasterVolume(float *volume);
+#endif
 
     /**This method dumps the state of the audio hardware */
     virtual status_t dumpState(int fd, const Vector<String16>& args);
diff --git a/include/hardware_legacy/AudioHardwareInterface.h b/include/hardware_legacy/AudioHardwareInterface.h
index b466000..598d8f7 100644
--- a/include/hardware_legacy/AudioHardwareInterface.h
+++ b/include/hardware_legacy/AudioHardwareInterface.h
@@ -216,6 +216,7 @@ public:
      */
     virtual status_t    setMasterVolume(float volume) = 0;
 
+#ifndef USES_AUDIO_LEGACY
     /**
      * Get the current master volume value for the HAL, if the HAL supports
      * master volume control.  AudioFlinger will query this value from the
@@ -223,6 +224,7 @@ public:
      * the initial master volume across all HALs.
      */
     virtual status_t    getMasterVolume(float *volume) = 0;
+#endif
 
     /**
      * setMode is called when the audio mode changes. NORMAL mode is for
-- 
1.7.9.1

